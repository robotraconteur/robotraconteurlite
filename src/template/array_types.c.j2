{#- jinja2 array_types.c.j2  > ../array_types.c -#}
/* Copyright 2011-2024 Wason Technology, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "robotraconteurlite/array.h"
#include <string.h>
#include <assert.h>

{% set types=[("double","robotraconteurlite_double"),("single","float"),("int8","robotraconteurlite_i8"),("uint8","robotraconteurlite_u8"),("int16","robotraconteurlite_i16"),
    ("uint16","robotraconteurlite_u16"),("int32","robotraconteurlite_i32"),("uint32","robotraconteurlite_u32"),("int64","robotraconteurlite_i64"),("uint64","robotraconteurlite_u64"),
    ("cdouble","struct robotraconteurlite_cdouble"),("csingle","struct robotraconteurlite_csingle"),
    ("bool","struct robotraconteurlite_bool")] %}
{% for type,ctype in types %}
/* {{type}} */
robotraconteurlite_status robotraconteurlite_buffer_vec_copy_to_{{type}}_array(
    const struct robotraconteurlite_buffer_vec* source_buf, robotraconteurlite_size_t source_buf_pos,
    struct robotraconteurlite_array_{{type}}* dest, robotraconteurlite_size_t dest_pos, robotraconteurlite_size_t dest_count)
{
    return robotraconteurlite_buffer_vec_copy_to_mem(source_buf, source_buf_pos,
                                                    {% if type in ("double","single") -%}
                                                    /* cppcheck-suppress invalidPointerCast */
                                                    {% endif -%}
                                                     (robotraconteurlite_byte*)dest->data, dest->len, dest_pos, sizeof({{ctype}}), dest_count);
}

robotraconteurlite_status robotraconteurlite_buffer_vec_copy_from_{{type}}_array(
    struct robotraconteurlite_buffer_vec* dest_buf, robotraconteurlite_size_t dest_buf_pos,
    const struct robotraconteurlite_array_{{type}}* source, robotraconteurlite_size_t source_pos, robotraconteurlite_size_t source_count)
{
    return robotraconteurlite_buffer_vec_copy_from_mem(dest_buf, dest_buf_pos,
                                                    {% if type in ("double","single") -%}
                                                    /* cppcheck-suppress invalidPointerCast */
                                                    {% endif -%}
                                                       (const robotraconteurlite_byte*)source->data, source->len, source_pos, sizeof({{ctype}}), source_count);
}

robotraconteurlite_status robotraconteurlite_buffer_vec_copy_to_{{type}}(
    const struct robotraconteurlite_buffer_vec* source_buf, robotraconteurlite_size_t source_buf_pos, {{ctype}}* dest)
{
    return robotraconteurlite_buffer_vec_copy_to_mem(source_buf, source_buf_pos,
                                                    {% if type in ("double","single") -%}
                                                    /* cppcheck-suppress invalidPointerCast */
                                                    {% endif -%}
                                                     (robotraconteurlite_byte*)dest, 1, 0, sizeof({{ctype}}), 1);
}

robotraconteurlite_status robotraconteurlite_buffer_vec_copy_from_{{type}}(
    struct robotraconteurlite_buffer_vec* dest_buf, robotraconteurlite_size_t dest_buf_pos, {{ctype}} source)
{
    return robotraconteurlite_buffer_vec_copy_from_mem(dest_buf, dest_buf_pos,
                                                    {% if type in ("double","single") -%}
                                                    /* cppcheck-suppress invalidPointerCast */
                                                    {% endif -%}
                                                       (const robotraconteurlite_byte*)&source, 1, 0, sizeof({{ctype}}), 1);
}

{% endfor %}
