{# jinja2 array_test_types.c.j2  > ../array_test_types.c #}

#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <string.h>
#include <time.h>
#include <stdlib.h>
#include <math.h>

#include "robotraconteurlite/array.h"
#define inline
#include <cmocka.h>

{% set int_types=[("int8","robotraconteurlite_i8"),("uint8","robotraconteurlite_u8"),("int16","robotraconteurlite_i16"),
    ("uint16","robotraconteurlite_u16"),("int32","robotraconteurlite_i32"),("uint32","robotraconteurlite_u32"),
    ("int64","robotraconteurlite_i64"),("uint64","robotraconteurlite_u64")] %}

{% for type, ctype in int_types %}

void robotraconteurlite_buffer_{{ type }}_test(void** state)
{
    {{ ctype }} a1[256];
    {{ ctype }} a2[256];
    robotraconteurlite_byte buf_data[256 * sizeof({{ctype}})];
    robotraconteurlite_size_t i = 0;
    struct robotraconteurlite_buffer buf;
    struct robotraconteurlite_buffer_vec buf_vec;
    struct robotraconteurlite_array_{{type}} {{type}}s;
    struct robotraconteurlite_array_{{type}} {{type}}s2;

    {{ctype}} d1 = 10;
    {{ctype}} d2 = 0;

    ROBOTRACONTEURLITE_UNUSED(state);

    for (i = 0; i < sizeof(a1) / sizeof({{ctype}}); i++)
        a1[i] = ({{ctype}})i;
    (void)memset(a2, 0, sizeof(a2));
    (void)memset(buf_data, 0, sizeof(buf_data));

    buf.data = buf_data;
    buf.len = sizeof(buf_data);

    buf_vec.buffer_vec = &buf;
    buf_vec.buffer_vec_cnt = 1;

    {{type}}s.data = a1;
    {{type}}s.len = sizeof(a1) / sizeof({{ctype}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_from_{{type}}_array(&buf_vec, 32, &{{type}}s, 10, 15), 0);

    assert_true(memcmp((a1 + 10), (buf_data + 32), 15*sizeof({{ctype}})) == 0);

    {{type}}s2.data = a2;
    {{type}}s2.len = sizeof(a2) / sizeof({{ctype}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_to_{{type}}_array(&buf_vec, 32, &{{type}}s2, 12, 12), 0);

    assert_true(memcmp(a1 + 10, a2 + 12, 12*sizeof({{ctype}})) == 0);

    robotraconteurlite_buffer_vec_copy_from_{{type}}(&buf_vec, 128, d1);
    assert_true(memcmp(&d1, (buf_data + 128), sizeof({{ctype}})) == 0);
    robotraconteurlite_buffer_vec_copy_to_{{type}}(&buf_vec, 32+sizeof({{ctype}}), &d2);
    assert_true(d2 == 11);
}

{% endfor %}

{% set float_types=[("double","robotraconteurlite_double"),("single","robotraconteurlite_single")] %}

#define robotraconteurlite_array_float robotraconteurlite_array_single
#define robotraconteurlite_buffer_vec_copy_from_float_array robotraconteurlite_buffer_vec_copy_from_single_array
#define robotraconteurlite_buffer_vec_copy_to_float_array robotraconteurlite_buffer_vec_copy_to_single_array
#define robotraconteurlite_buffer_vec_copy_from_float robotraconteurlite_buffer_vec_copy_from_single
#define robotraconteurlite_buffer_vec_copy_to_float robotraconteurlite_buffer_vec_copy_to_single

{% for type,ctype in float_types %}
static int cmp_{{ type }}(const {{ctype}}* a, const {{ctype}}* b, robotraconteurlite_size_t len)
{
    robotraconteurlite_size_t i = 0;
    for (i = 0; i < len; i++)
    {
        if (a[i] != b[i])
        {
            return 1;
        }
    }
    return 0;
}

void robotraconteurlite_buffer_{{type}}_test(void** state)
{
    {{ctype}} a1[256];
    {{ctype}} a2[256];
    robotraconteurlite_byte buf_data[256 * sizeof({{ctype}})];
    robotraconteurlite_size_t i = 0;
    struct robotraconteurlite_buffer buf;
    struct robotraconteurlite_buffer_vec buf_vec;
    struct robotraconteurlite_array_{{type}} {{type}}s;
    struct robotraconteurlite_array_{{type}} {{type}}s2;

    {{ctype}} d1 = 10.23;
    {{ctype}} d2 = 0.0;

    ROBOTRACONTEURLITE_UNUSED(state);

    for (i = 0; i < sizeof(a1) / sizeof({{ctype}}); i++)
        a1[i] = ({{ctype}})i;
    (void)memset(a2, 0, sizeof(a2));
    (void)memset(buf_data, 0, sizeof(buf_data));

    buf.data = buf_data;
    buf.len = sizeof(buf_data);

    buf_vec.buffer_vec = &buf;
    buf_vec.buffer_vec_cnt = 1;

    {{type}}s.data = a1;
    {{type}}s.len = sizeof(a1) / sizeof({{ctype}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_from_{{type}}_array(&buf_vec, 32, &{{type}}s, 10, 15), 0);

    assert_true(cmp_{{type}}(a1 + 10, ({{ctype}}*)(buf_data + 32), 15) == 0);

    {{type}}s2.data = a2;
    {{type}}s2.len = sizeof(a2) / sizeof({{ctype}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_to_{{type}}_array(&buf_vec, 32, &{{type}}s2, 12, 12), 0);

    assert_true(cmp_{{type}}(a1 + 10, a2 + 12, 12) == 0);

    robotraconteurlite_buffer_vec_copy_from_{{type}}(&buf_vec, 128, d1);
    assert_true(cmp_{{type}}(&d1, ({{ctype}}*)(buf_data + 128), 1) == 0);
    robotraconteurlite_buffer_vec_copy_to_{{type}}(&buf_vec, 32+sizeof({{ctype}}), &d2);
    assert_true(d2 == 11.0);
}
{% endfor %}

{% set complex_types=["csingle","cdouble"] %}


{% for type in complex_types %}

static int cmp_{{type}}(const struct robotraconteurlite_{{type}}* a, const struct robotraconteurlite_{{type}}* b,
                       robotraconteurlite_size_t len)
{
    robotraconteurlite_size_t i = 0;
    for (i = 0; i < len; i++)
    {
        if (fabs((double)(a[i].real - b[i].real)) > 1e-4 || fabs((double)(a[i].imag - b[i].imag)) > 1e-4)
        {
            return 1;
        }
    }
    return 0;
}

void robotraconteurlite_buffer_{{type}}_test(void** state)
{
    struct robotraconteurlite_{{type}} a1[256];
    struct robotraconteurlite_{{type}} a2[256];
    robotraconteurlite_byte buf_data[256 * sizeof(struct robotraconteurlite_{{type}})];
    robotraconteurlite_size_t i = 0;
    struct robotraconteurlite_buffer buf;
    struct robotraconteurlite_buffer_vec buf_vec;
    struct robotraconteurlite_array_{{type}} {{type}}s;
    struct robotraconteurlite_array_{{type}} {{type}}s2;

    struct robotraconteurlite_{{type}} d1;
    struct robotraconteurlite_{{type}} d2;
    memset(&d1, 0, sizeof(d1));
    memset(&d2, 0, sizeof(d2));

    d1.real = 10.23;
    d1.imag = 11.34;

    ROBOTRACONTEURLITE_UNUSED(state);

    for (i = 0; i < sizeof(a1) / sizeof(struct robotraconteurlite_{{type}}); i++)
    {
        a1[i].real = (robotraconteurlite_single)i;
        a1[i].imag = (robotraconteurlite_single)(i+1);
    }
    (void)memset(a2, 0, sizeof(a2));
    (void)memset(buf_data, 0, sizeof(buf_data));

    buf.data = buf_data;
    buf.len = sizeof(buf_data);

    buf_vec.buffer_vec = &buf;
    buf_vec.buffer_vec_cnt = 1;

    {{type}}s.data = a1;
    {{type}}s.len = sizeof(a1) / sizeof(struct robotraconteurlite_{{type}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_from_{{type}}_array(&buf_vec, 32, &{{type}}s, 10, 15), 0);

    assert_true(cmp_{{type}}(a1 + 10, (struct robotraconteurlite_{{type}}*)(buf_data + 32), 15) == 0);

    {{type}}s2.data = a2;
    {{type}}s2.len = sizeof(a2) / sizeof(struct robotraconteurlite_{{type}});

    assert_return_code(robotraconteurlite_buffer_vec_copy_to_{{type}}_array(&buf_vec, 32, &{{type}}s2, 12, 12), 0);

    assert_true(cmp_{{type}}(a1 + 10, a2 + 12, 12) == 0);

    robotraconteurlite_buffer_vec_copy_from_{{type}}(&buf_vec, 128, d1);
    assert_true(cmp_{{type}}(&d1, (struct robotraconteurlite_{{type}}*)(buf_data + 128), 1) == 0);
    robotraconteurlite_buffer_vec_copy_to_{{type}}(&buf_vec, 32+sizeof(struct robotraconteurlite_{{type}}), &d2);
    assert_true(d2.real == 11.0);
    assert_true(d2.imag == 12.0);
}

{% endfor %}




int main(void)
{
    const struct CMUnitTest tests[] = {
        {%- for type,_ in int_types -%}
        cmocka_unit_test(robotraconteurlite_buffer_{{ type }}_test),
        {% endfor -%}
        {%- for type,_ in float_types -%}
        cmocka_unit_test(robotraconteurlite_buffer_{{ type }}_test),
        {% endfor -%}
        {%- for type in complex_types -%}
        cmocka_unit_test(robotraconteurlite_buffer_{{ type }}_test){{ "" if loop.last else ", " }}
        {% endfor -%}

                                       };
    return cmocka_run_group_tests(tests, NULL, NULL);
}
